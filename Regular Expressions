1. Fill in the code to check if the text passed contains punctuation symbols:
commas, periods, colons, semicolons, question marks, and exclamation points.

  import re
  def check_punctuation (text):
    result = re.search(r"[.?!]", text)
    return result != None
  
  print(check_punctuation("This is a sentence that ends with a period.")) # True
  print(check_punctuation("This is a sentence fragment without a period")) # False
  print(check_punctuation("Aren't regular expressions awesome?")) # True
  print(check_punctuation("Wow! We're really picking up some steam now!")) # True
  print(check_punctuation("End of the line")) # False

2. Fill in the code to check if the text passed has at least 2 groups of alphanumeric characters 
(including letters, numbers, and underscores) separated by one or more whitespace characters.

  import re
  def check_character_groups(text):
    result = re.search(r"\w\s\d*", text)  // w for _ characters and characters and s for the whitespaces and d for digits
    return result != None
  
  print(check_character_groups("One")) # False
  print(check_character_groups("123  Ready Set GO")) # True
  print(check_character_groups("username user_01")) # True
  print(check_character_groups("shopping_list: milk, bread, eggs.")) # False

3. Fill in the code to check if the text passed looks like a standard sentence, meaning that it starts with an uppercase letter, 
followed by at least some lowercase letters or a space, and ends with a period, question mark, or exclamation point.
  
  import re
  def check_sentence(text):
    result = re.search(r"[A-Z].[a-z ].*[.?!]", text) // or ^[A-Z].[a-z ]*[.?!]$
    return result != None
  
  print(check_sentence("Is this is a sentence?")) # True
  print(check_sentence("is this is a sentence?")) # False
  print(check_sentence("Hello")) # False
  print(check_sentence("1-2-3-GO!")) # False
  print(check_sentence("A star is born.")) # True

Quiz No 2:    

1. We're working with a CSV file, which contains employee information. Each record has a name field, followed by a phone number field, and a role field.
The phone number field contains U.S. phone numbers, and needs to be modified to the international format,with "+1-" in front of the phone number. 
Fill in the regular expression, using groups, to use the transform_record function to do that.
  
  import re
  def transform_record(record):
    new_record = re.sub(r',([\d\-]+),',r',+1-\1,',record)
    return new_record
  
  print(transform_record("Sabrina Green,802-867-5309,System Administrator")) 
  # Sabrina Green,+1-802-867-5309,System Administrator
  
  print(transform_record("Eli Jones,684-3481127,IT specialist")) 
  # Eli Jones,+1-684-3481127,IT specialist
  
  print(transform_record("Melody Daniels,846-687-7436,Programmer")) 
  # Melody Daniels,+1-846-687-7436,Programmer
  
  print(transform_record("Charlie Rivera,698-746-3357,Web Developer")) 
  # Charlie Rivera,+1-698-746-3357,Web Developer

2. The transform_comments function converts comments in a Python script into those usable by a C compiler. 
This means looking for text that begins with a hash mark (#) and replacing it with double slashes (//), 
which is the C single-line comment indicator.

    import re
  def transform_comments(line_of_code):
    result = re.sub(r'#+',r'//',line_of_code) // finds for the more than the one # and then replace it with the //
    return result
  
  print(transform_comments("### Start of program")) 
  # Should be "// Start of program"
  print(transform_comments("  number = 0   ## Initialize the variable")) 
  # Should be "  number = 0   // Initialize the variable"
  print(transform_comments("  number += 1   # Increment the variable")) 
  # Should be "  number += 1   // Increment the variable"
  print(transform_comments("  return(number)")) 
  # Should be "  return(number)"

3. Question 2%0D%0AThe multi_vowel_words function returns all words with 3 or more consecutive vowels (a, e, i, o, u). 
Fill in the regular expression to do that.
  
  import re
  def multi_vowel_words(text):
    pattern = r'\w*[a,e,i,o,u]{3}\w*'
    result = re.findall(pattern, text)
    return result
  
  print(multi_vowel_words("Life is beautiful")) 
  # ['beautiful']
  
  print(multi_vowel_words("Obviously, the queen is courageous and gracious.")) 
  # ['Obviously', 'queen', 'courageous', 'gracious']
  
  print(multi_vowel_words("The rambunctious children had to sit quietly and await their delicious dinner.")) 
  # ['rambunctious', 'quietly', 'delicious']
  
  print(multi_vowel_words("The order of a data queue is First In First Out (FIFO)")) 
  # ['queue']
  
  print(multi_vowel_words("Hello world!")) 
  # []


4.  The convert_phone_number function checks for a U.S. phone number format: XXX-XXX-XXXX (3 digits followed by a dash, 
3 more digits followed by a dash, and 4 digits), and converts it to a more formal format that looks like this: (XXX) XXX-XXXX.

  import re
  def convert_phone_number(phone):
  result = re.sub(r'\b(\d{3})-(\d{3})-(\d{4})\b',r'(\1) \2-\3',phone)
  return result
  
  print(convert_phone_number("My number is 212-345-9999.")) # My number is (212) 345-9999.
  print(convert_phone_number("Please call 888-555-1234")) # Please call (888) 555-1234
  print(convert_phone_number("123-123-12345")) # 123-123-12345
  print(convert_phone_number("Phone number of Buckingham Palace is +44 303 123 7300")) # Phone number of Buckingham Palace is +44 303 123 7300
  

